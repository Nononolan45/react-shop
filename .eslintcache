[{"/home/nolan/ippsi/js/react-shop/src/App.js":"1","/home/nolan/ippsi/js/react-shop/src/index.js":"2","/home/nolan/ippsi/js/react-shop/src/Filters.js":"3","/home/nolan/ippsi/js/react-shop/src/Categories.js":"4","/home/nolan/ippsi/js/react-shop/src/Product.js":"5","/home/nolan/ippsi/js/react-shop/src/ListProducts.js":"6","/home/nolan/ippsi/js/react-shop/src/AddCart.js":"7","/home/nolan/ippsi/js/react-shop/src/Header.js":"8","/home/nolan/ippsi/js/react-shop/src/DetailsCart.js":"9"},{"size":4519,"mtime":1607711253240,"results":"10","hashOfConfig":"11"},{"size":276,"mtime":1607636410713,"results":"12","hashOfConfig":"11"},{"size":1888,"mtime":1607701262084,"results":"13","hashOfConfig":"11"},{"size":2243,"mtime":1607708849952,"results":"14","hashOfConfig":"11"},{"size":1291,"mtime":1607723383603,"results":"15","hashOfConfig":"11"},{"size":422,"mtime":1607708945070,"results":"16","hashOfConfig":"11"},{"size":1632,"mtime":1607708761991,"results":"17","hashOfConfig":"11"},{"size":2158,"mtime":1607684554924,"results":"18","hashOfConfig":"11"},{"size":7484,"mtime":1607689451811,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"12n0vrh",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},"/home/nolan/ippsi/js/react-shop/src/App.js",["41","42","43","44","45"],"/home/nolan/ippsi/js/react-shop/src/index.js",[],["46","47"],"/home/nolan/ippsi/js/react-shop/src/Filters.js",["48"],"/home/nolan/ippsi/js/react-shop/src/Categories.js",[],"/home/nolan/ippsi/js/react-shop/src/Product.js",["49","50","51"],"/home/nolan/ippsi/js/react-shop/src/ListProducts.js",[],"/home/nolan/ippsi/js/react-shop/src/AddCart.js",["52"],"import { useState, useContext } from 'react';\nimport { Context } from './App';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport './DetailsCart.css';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport './AddCart.css';\nimport AddShoppingCartIcon from '@material-ui/icons/AddShoppingCart';\n\n\n\n\nconst AddCart = ({ product }) => {\n\n    const [count, setCount] = useState(1);\n    const listCount = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    const [value_context, dispatch] = useContext(Context);\n\n    const handleChange = (e) => {\n        setCount(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        incrementCountCart();\n    }\n\n    const incrementCountCart = () => {\n        dispatch({ type: 'ADD_CART', value: { ...product, count: Number(count) } })\n\n    }\n\n    return <Grid container spacing={1}>\n        <Grid item xs={12} sm={6}>\n            <div id=\"price\">{product.price}$\n            </div>\n        </Grid>\n        <Grid item xs={12} sm={6}>\n         <InputLabel htmlFor=\"count\"></InputLabel>\n         <Select\n            native\n            value={count}\n            onChange={handleChange}\n            inputProps={{\n                name: 'count',\n            }}\n            >\n            {listCount.map(val => (\n                     <option key={val} value={val}>{val}</option>\n            ))}\n        </Select>\n        <Button color=\"primary\" onClick={handleSubmit} variant=\"contained\">\n        <AddShoppingCartIcon />\n        </Button>\n        </Grid>\n    </Grid>\n}\n\nexport default AddCart","/home/nolan/ippsi/js/react-shop/src/Header.js",["53"],"/home/nolan/ippsi/js/react-shop/src/DetailsCart.js",["54"],"import React from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport IconButton from '@material-ui/core/IconButton';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport Typography from '@material-ui/core/Typography';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport './DetailsCart.css';\nimport Dialog from '@material-ui/core/Dialog';\nimport CloseIcon from '@material-ui/icons/Close';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport CreditCardIcon from '@material-ui/icons/CreditCard';\nimport Divider from '@material-ui/core/Divider';\nimport Button from '@material-ui/core/Button';\n\n\n\n\n\nconst rand = () => {\n    return Math.round(Math.random() * 20) - 10;\n}\n\nconst getModalStyle = () => {\n    const top = 50 + rand();\n    const left = 50 + rand();\n\n    return {\n        top: `${top}%`,\n        left: `${left}%`,\n        transform: `translate(-${top}%, -${left}%)`,\n    };\n}\n\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        position: 'absolute',\n        width: 500,\n        backgroundColor: theme.palette.background.paper,\n        border: '2px solid #000',\n        boxShadow: theme.shadows[5],\n        padding: theme.spacing(2, 4, 3),\n    },\n\n    inline: {\n        display: 'inline',\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 40,\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n    button: {\n        margin: theme.spacing(1)\n    }\n\n}));\n\nconst styles = (theme) => ({\n    root: {\n        margin: 0,\n        padding: theme.spacing(2),\n    },\n    closeButton: {\n        position: 'absolute',\n        right: theme.spacing(1),\n        top: theme.spacing(1),\n        color: theme.palette.grey[500],\n    },\n});\n\nconst DialogContent = withStyles((theme) => ({\n    root: {\n        padding: theme.spacing(2),\n    },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme) => ({\n    root: {\n        margin: 0,\n        padding: theme.spacing(1),\n    },\n}))(MuiDialogActions);\n\nconst DialogTitle = withStyles(styles)((props) => {\n    const { children, classes, onClose, ...other } = props;\n    return (\n        <MuiDialogTitle disableTypography className={classes.root} {...other}>\n            <Typography variant=\"h6\">{children}</Typography>\n            {onClose ? (\n                <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n                    <CloseIcon />\n                </IconButton>\n            ) : null}\n        </MuiDialogTitle>\n    );\n});\n\n\n\n\n\n\n\nconst DetailsCart = ({ carts, dispatch, handleClose, open }, ref) => {\n    const classes = useStyles();\n    const [modalStyle] = React.useState(getModalStyle);\n\n    const generateListCout = (count) => {\n        return Array.from(Array(Math.ceil(count / 10) * 10).keys());\n    }\n\n    const handleChangeSelect = (e) => {\n        dispatch({ type: 'UPDATE_COUNT_CART', value: { count: Number(e.target.value), id: Number(e.target.id) } });\n\n    }\n\n    const clearCart = () => {\n        dispatch({ type: 'CLEAR_CART' });\n    }\n\n    const handleDelete = (e) => {\n        dispatch({ type: 'DELETE_CART', value: { id: Number(e.target.id) } });\n    }\n\n    const totalPriceAllCart = () => {\n        return carts.reduce((sum, cart) => {\n            return sum + (cart.price * cart.count)\n        }, 0)\n    }\n\n\n\n\n    return <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n            CART\n        </DialogTitle>\n        <DialogContent dividers>\n            {(carts.length === 0) && (<p>Your cart is empty.</p>)}\n\n            {(carts.length > 0) && (\n                <List className={classes.root}>\n                    {carts.map((cart) => (\n                        <>\n                            <ListItem alignItems=\"flex-start\" key={cart.id}>\n\n                                <ListItemAvatar>\n                                    <Avatar alt=\"...\" src={cart.image} />\n                                </ListItemAvatar>\n\n                                <ListItemText\n                                    primary={cart.title}\n                                    secondary={\n                                        <>\n                                            <Typography\n                                                component=\"div\"\n                                                variant=\"body2\"\n                                                className={classes.inline}\n                                                color=\"textPrimary\"\n                                            > {`Indiv ${cart.price}$`}\n                                            </Typography>\n                                            <div id=\"total\">Total {cart.price * cart.count}$</div>\n                                        </>\n                                    }\n                                />\n\n                                <FormControl className={classes.formControl}>\n                                    <InputLabel htmlFor=\"count\"></InputLabel>\n                                    <Select\n                                        native\n                                        value={cart.count}\n                                        onChange={handleChangeSelect}\n                                        inputProps={{\n                                            name: 'count',\n                                            id: cart.id,\n                                        }}\n                                    >\n                                        {generateListCout(cart.count).map(item => (\n                                            (item !== 0) && <option key={item} value={item}>{item}</option>\n                                        ))}\n                                    </Select>\n\n                                    <Button color=\"secondary\" onClick={handleDelete} variant=\"contained\">\n                                        <span id={cart.id}>DELETE</span>\n                                    </Button>\n\n                                </FormControl>\n                            </ListItem>\n                            <Divider />\n                        </>\n                    ))}\n                </List>\n            )}\n        </DialogContent>\n        <DialogActions>\n\n            <Button\n                startIcon={<DeleteIcon />}\n                onClick={clearCart}\n                color=\"primary\"\n                variant=\"contained\"\n                className={classes.button}\n            >\n                CLEAR CART\n            </Button>\n\n            <Button\n                className={classes.button}\n                startIcon={<CreditCardIcon />}\n                onClick={handleClose}\n                color=\"primary\"\n                variant=\"contained\"\n            >{\n             `CHECKOUT ${totalPriceAllCart()}$`}\n            </Button>\n\n        </DialogActions>\n    </Dialog>\n}\n\nexport default React.forwardRef(DetailsCart);\n",{"ruleId":"55","severity":1,"message":"56","line":2,"column":51,"nodeType":"57","messageId":"58","endLine":2,"endColumn":61},{"ruleId":"55","severity":1,"message":"59","line":8,"column":8,"nodeType":"57","messageId":"58","endLine":8,"endColumn":13},{"ruleId":"55","severity":1,"message":"60","line":62,"column":10,"nodeType":"57","messageId":"58","endLine":62,"endColumn":15},{"ruleId":"55","severity":1,"message":"61","line":69,"column":9,"nodeType":"57","messageId":"58","endLine":69,"endColumn":16},{"ruleId":"62","severity":1,"message":"63","line":144,"column":6,"nodeType":"64","endLine":144,"endColumn":47,"suggestions":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"55","severity":1,"message":"70","line":3,"column":8,"nodeType":"57","messageId":"58","endLine":3,"endColumn":17},{"ruleId":"55","severity":1,"message":"71","line":8,"column":8,"nodeType":"57","messageId":"58","endLine":8,"endColumn":18},{"ruleId":"55","severity":1,"message":"72","line":10,"column":8,"nodeType":"57","messageId":"58","endLine":10,"endColumn":17},{"ruleId":"55","severity":1,"message":"73","line":11,"column":8,"nodeType":"57","messageId":"58","endLine":11,"endColumn":12},{"ruleId":"55","severity":1,"message":"74","line":18,"column":12,"nodeType":"57","messageId":"58","endLine":18,"endColumn":25},{"ruleId":"55","severity":1,"message":"75","line":1,"column":29,"nodeType":"57","messageId":"58","endLine":1,"endColumn":36},{"ruleId":"55","severity":1,"message":"76","line":118,"column":12,"nodeType":"57","messageId":"58","endLine":118,"endColumn":22},"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'Paper' is defined but never used.","'error' is assigned a value but never used.","'classes' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'filterProducts' and 'products.length'. Either include them or remove the dependency array.","ArrayExpression",["77"],"no-native-reassign",["78"],"no-negated-in-lhs",["79"],"'Container' is defined but never used.","'Typography' is defined but never used.","'LabelIcon' is defined but never used.","'Icon' is defined but never used.","'value_context' is assigned a value but never used.","'useMemo' is defined but never used.","'modalStyle' is assigned a value but never used.",{"desc":"80","fix":"81"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [loadProducts, search, categories, price, products.length, filterProducts]",{"range":"82","text":"83"},[3839,3880],"[loadProducts, search, categories, price, products.length, filterProducts]"]